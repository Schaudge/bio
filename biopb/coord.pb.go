// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/bio/coord.proto

package biopb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Coord struct {
	RefId int32 `protobuf:"varint,1,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
	Pos   int32 `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Seq   int32 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *Coord) Reset()         { *m = Coord{} }
func (m *Coord) String() string { return proto.CompactTextString(m) }
func (*Coord) ProtoMessage()    {}
func (*Coord) Descriptor() ([]byte, []int) {
	return fileDescriptor_208fd31a4329e696, []int{0}
}
func (m *Coord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Coord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Coord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Coord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coord.Merge(m, src)
}
func (m *Coord) XXX_Size() int {
	return m.Size()
}
func (m *Coord) XXX_DiscardUnknown() {
	xxx_messageInfo_Coord.DiscardUnknown(m)
}

var xxx_messageInfo_Coord proto.InternalMessageInfo

func (m *Coord) GetRefId() int32 {
	if m != nil {
		return m.RefId
	}
	return 0
}

func (m *Coord) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *Coord) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type CoordRange struct {
	Start Coord `protobuf:"bytes,1,opt,name=start,proto3" json:"start"`
	Limit Coord `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit"`
}

func (m *CoordRange) Reset()         { *m = CoordRange{} }
func (m *CoordRange) String() string { return proto.CompactTextString(m) }
func (*CoordRange) ProtoMessage()    {}
func (*CoordRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_208fd31a4329e696, []int{1}
}
func (m *CoordRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoordRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoordRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoordRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoordRange.Merge(m, src)
}
func (m *CoordRange) XXX_Size() int {
	return m.Size()
}
func (m *CoordRange) XXX_DiscardUnknown() {
	xxx_messageInfo_CoordRange.DiscardUnknown(m)
}

var xxx_messageInfo_CoordRange proto.InternalMessageInfo

func (m *CoordRange) GetStart() Coord {
	if m != nil {
		return m.Start
	}
	return Coord{}
}

func (m *CoordRange) GetLimit() Coord {
	if m != nil {
		return m.Limit
	}
	return Coord{}
}

func init() {
	proto.RegisterType((*Coord)(nil), "grail.proto.bio.Coord")
	proto.RegisterType((*CoordRange)(nil), "grail.proto.bio.CoordRange")
}

func init() { proto.RegisterFile("proto/bio/coord.proto", fileDescriptor_208fd31a4329e696) }

var fileDescriptor_208fd31a4329e696 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xca, 0xcc, 0xd7, 0x4f, 0xce, 0xcf, 0x2f, 0x4a, 0xd1, 0x03, 0xf3, 0x85, 0xf8,
	0xd3, 0x8b, 0x12, 0x33, 0x73, 0x20, 0x1c, 0xbd, 0xa4, 0xcc, 0x7c, 0x29, 0xdd, 0xf4, 0xcc, 0x92,
	0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0xf4, 0xfc, 0xf4, 0x7c, 0x7d, 0xb0, 0x54, 0x52,
	0x69, 0x1a, 0x98, 0x07, 0x31, 0x04, 0xc4, 0x82, 0x68, 0x51, 0x72, 0xe2, 0x62, 0x75, 0x06, 0x19,
	0x27, 0x24, 0xca, 0xc5, 0x56, 0x94, 0x9a, 0x16, 0x9f, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1,
	0x1a, 0xc4, 0x5a, 0x94, 0x9a, 0xe6, 0x99, 0x22, 0x24, 0xc0, 0xc5, 0x5c, 0x90, 0x5f, 0x2c, 0xc1,
	0x04, 0x16, 0x03, 0x31, 0x41, 0x22, 0xc5, 0xa9, 0x85, 0x12, 0xcc, 0x10, 0x91, 0xe2, 0xd4, 0x42,
	0xa5, 0x12, 0x2e, 0x2e, 0xb0, 0x19, 0x41, 0x89, 0x79, 0xe9, 0xa9, 0x42, 0x46, 0x5c, 0xac, 0xc5,
	0x25, 0x89, 0x45, 0x25, 0x60, 0x73, 0xb8, 0x8d, 0xc4, 0xf4, 0xd0, 0x5c, 0xa8, 0x07, 0x56, 0xeb,
	0xc4, 0x72, 0xe2, 0x9e, 0x3c, 0x43, 0x10, 0x44, 0x29, 0x48, 0x4f, 0x4e, 0x66, 0x6e, 0x66, 0x09,
	0xd8, 0x1e, 0x82, 0x7a, 0xc0, 0x4a, 0x9d, 0xcc, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e,
	0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58,
	0x8e, 0x21, 0x4a, 0x16, 0x39, 0x08, 0x40, 0x06, 0x81, 0x02, 0x0d, 0x8a, 0x0b, 0x92, 0x92, 0xd8,
	0xc0, 0xc6, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xec, 0x6f, 0x36, 0xa8, 0x52, 0x01, 0x00,
	0x00,
}

func (m *Coord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RefId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCoord(dAtA, i, uint64(m.RefId))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCoord(dAtA, i, uint64(m.Pos))
	}
	if m.Seq != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCoord(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *CoordRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoordRange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCoord(dAtA, i, uint64(m.Start.Size()))
	n1, err := m.Start.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintCoord(dAtA, i, uint64(m.Limit.Size()))
	n2, err := m.Limit.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func encodeVarintCoord(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Coord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RefId != 0 {
		n += 1 + sovCoord(uint64(m.RefId))
	}
	if m.Pos != 0 {
		n += 1 + sovCoord(uint64(m.Pos))
	}
	if m.Seq != 0 {
		n += 1 + sovCoord(uint64(m.Seq))
	}
	return n
}

func (m *CoordRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Start.Size()
	n += 1 + l + sovCoord(uint64(l))
	l = m.Limit.Size()
	n += 1 + l + sovCoord(uint64(l))
	return n
}

func sovCoord(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCoord(x uint64) (n int) {
	return sovCoord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Coord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefId", wireType)
			}
			m.RefId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoordRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoordRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoordRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Start.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Limit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCoord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCoord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCoord
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCoord
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCoord
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCoord(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCoord
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCoord = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCoord   = fmt.Errorf("proto: integer overflow")
)
